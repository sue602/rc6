; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\gh\rc6\rc6.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	@rc6_setkey@12
; Function compile flags: /Ogsp
;	COMDAT @rc6_setkey@12
_TEXT	SEGMENT
_L$ = -44						; size = 32
tv192 = -12						; size = 4
_key$ = -8						; size = 4
tv95 = -4						; size = 4
_A$ = 8							; size = 4
_keylen$ = 8						; size = 4
@rc6_setkey@12 PROC					; COMDAT
; _key$ = ecx
; _K$ = edx
; File c:\gh\rc6\rc6.c
; Line 9
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, ecx
; Line 13
	mov	ecx, DWORD PTR _keylen$[ebp]
	push	ebx
	shr	ecx, 2
	xor	ebx, ebx
	push	esi
	push	edi
	mov	DWORD PTR _key$[ebp], eax
	mov	DWORD PTR tv192[ebp], ecx
	cmp	ecx, ebx
	jbe	SHORT $LN9@
	mov	esi, edx
	lea	edi, DWORD PTR _L$[ebp]
	rep movsd
$LN9@:
; Line 17
	mov	edx, -1209970333			; b7e15163H
; Line 20
	xor	ecx, ecx
$LL6@:
; Line 21
	mov	DWORD PTR [eax+ecx*4], edx
; Line 22
	sub	edx, 1640531527				; 61c88647H
	inc	ecx
	cmp	ecx, 44					; 0000002cH
	jb	SHORT $LL6@
; Line 25
	xor	edi, edi
	xor	esi, esi
	mov	DWORD PTR _A$[ebp], ebx
	mov	DWORD PTR tv95[ebp], 132		; 00000084H
	jmp	SHORT $LN3@
$LL18@:
	mov	eax, DWORD PTR _key$[ebp]
$LN3@:
; Line 30
	lea	ecx, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [ecx]
	add	eax, ebx
	add	eax, DWORD PTR _A$[ebp]
; Line 31
	lea	edx, DWORD PTR _L$[ebp+edi*4]
	rol	eax, 3
	mov	DWORD PTR [ecx], eax
	lea	ecx, DWORD PTR [ebx+eax]
	mov	DWORD PTR _A$[ebp], eax
	mov	eax, DWORD PTR [edx]
	add	eax, ebx
	add	eax, DWORD PTR _A$[ebp]
; Line 34
	push	44					; 0000002cH
	rol	eax, cl
	pop	ecx
	mov	DWORD PTR [edx], eax
	mov	ebx, eax
	xor	edx, edx
	lea	eax, DWORD PTR [esi+1]
	div	ecx
; Line 36
	lea	eax, DWORD PTR [edi+1]
	mov	esi, edx
; Line 37
	xor	edx, edx
	div	DWORD PTR tv192[ebp]
	dec	DWORD PTR tv95[ebp]
	mov	edi, edx
	jne	SHORT $LL18@
	pop	edi
	pop	esi
	pop	ebx
; Line 39
	leave
	ret	4
@rc6_setkey@12 ENDP
_TEXT	ENDS
PUBLIC	@rc6_encrypt@12
; Function compile flags: /Ogsp
;	COMDAT @rc6_encrypt@12
_TEXT	SEGMENT
tv93 = -16						; size = 4
_D$ = -12						; size = 4
_C$ = -8						; size = 4
_A$ = -4						; size = 4
_output$ = 8						; size = 4
@rc6_encrypt@12 PROC					; COMDAT
; _key$ = ecx
; _input$ = edx
; Line 42
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 51
	mov	eax, DWORD PTR [edx]
	push	ebx
	push	esi
	push	edi
; Line 57
	mov	edi, DWORD PTR [edx+4]
	add	edi, DWORD PTR [ecx]
	lea	esi, DWORD PTR [ecx+4]
; Line 58
	mov	ecx, DWORD PTR [edx+12]
	add	ecx, DWORD PTR [esi]
	mov	DWORD PTR _A$[ebp], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _C$[ebp], eax
	mov	DWORD PTR _D$[ebp], ecx
	add	esi, 4
	mov	DWORD PTR tv93[ebp], 20			; 00000014H
$LL3@:
; Line 62
	lea	edx, DWORD PTR [edi+edi+1]
	imul	edx, edi
; Line 63
	lea	eax, DWORD PTR [ecx+ecx+1]
	imul	eax, ecx
	rol	edx, 5
	rol	eax, 5
; Line 64
	mov	ecx, eax
; Line 65
	xor	eax, DWORD PTR _C$[ebp]
	mov	ebx, edx
	xor	ebx, DWORD PTR _A$[ebp]
; Line 68
	mov	DWORD PTR _A$[ebp], edi
	rol	ebx, cl
	mov	ecx, edx
	add	ebx, DWORD PTR [esi]
	rol	eax, cl
	add	esi, 8
	mov	ecx, ebx
	add	eax, DWORD PTR [esi-4]
	dec	DWORD PTR tv93[ebp]
; Line 69
	mov	edi, eax
; Line 70
	mov	eax, DWORD PTR _D$[ebp]
	mov	DWORD PTR _C$[ebp], eax
; Line 71
	mov	DWORD PTR _D$[ebp], ecx
	jne	SHORT $LL3@
; Line 76
	add	eax, DWORD PTR [esi+4]
	mov	esi, DWORD PTR [esi]
; Line 79
	mov	edx, DWORD PTR _output$[ebp]
	add	esi, DWORD PTR _A$[ebp]
; Line 80
	mov	DWORD PTR [edx+4], edi
	pop	edi
	mov	DWORD PTR [edx], esi
	pop	esi
; Line 81
	mov	DWORD PTR [edx+8], eax
; Line 82
	mov	DWORD PTR [edx+12], ecx
	pop	ebx
; Line 83
	leave
	ret	4
@rc6_encrypt@12 ENDP
_TEXT	ENDS
PUBLIC	@rc6_decrypt@12
; Function compile flags: /Ogsp
;	COMDAT @rc6_decrypt@12
_TEXT	SEGMENT
_key$ = -16						; size = 4
_A$ = -12						; size = 4
_i$ = -8						; size = 4
tv386 = -4						; size = 4
_output$ = 8						; size = 4
@rc6_decrypt@12 PROC					; COMDAT
; _key$ = ecx
; _input$ = edx
; Line 86
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
; Line 99
	mov	ebx, DWORD PTR [edx+12]
	push	esi
; Line 102
	mov	esi, DWORD PTR [edx+8]
	sub	esi, DWORD PTR [ecx+172]
	push	edi
	mov	edi, DWORD PTR [edx+4]
; Line 103
	mov	edx, DWORD PTR [edx]
	sub	edx, DWORD PTR [ecx+168]
	mov	DWORD PTR _key$[ebp], ecx
	add	ecx, 160				; 000000a0H
	mov	DWORD PTR _A$[ebp], edx
; Line 106
	mov	DWORD PTR _i$[ebp], 20			; 00000014H
	mov	DWORD PTR tv386[ebp], ecx
$LL8@:
; Line 109
	mov	ecx, DWORD PTR tv386[ebp]
	sub	edi, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+edx+1]
	imul	eax, edx
	lea	edx, DWORD PTR [esi+esi+1]
	imul	edx, esi
	rol	eax, 5
	rol	edx, 5
	mov	ecx, eax
	ror	edi, cl
; Line 110
	mov	ecx, DWORD PTR tv386[ebp]
	sub	ebx, DWORD PTR [ecx]
	sub	DWORD PTR tv386[ebp], 8
	xor	edi, edx
	mov	ecx, edx
	ror	ebx, cl
; Line 112
	xor	eax, ebx
	dec	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], 0
; Line 113
	mov	ebx, esi
; Line 114
	mov	esi, edi
; Line 115
	mov	edi, DWORD PTR _A$[ebp]
; Line 116
	mov	edx, eax
	mov	DWORD PTR _A$[ebp], edx
	ja	SHORT $LL8@
; Line 120
	mov	ecx, DWORD PTR _key$[ebp]
	sub	ebx, DWORD PTR [ecx+4]
; Line 121
	sub	edi, DWORD PTR [ecx]
; Line 124
	mov	ecx, DWORD PTR _output$[ebp]
; Line 125
	mov	DWORD PTR [ecx+4], edi
	pop	edi
; Line 126
	mov	DWORD PTR [ecx+8], esi
	pop	esi
; Line 127
	mov	DWORD PTR [ecx+12], ebx
	mov	DWORD PTR [ecx], eax
	pop	ebx
; Line 128
	leave
	ret	4
@rc6_decrypt@12 ENDP
_TEXT	ENDS
END
