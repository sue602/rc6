; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	F:\gh\rc6\rc6.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_rc6_setkey
; Function compile flags: /Ogspy
;	COMDAT _rc6_setkey
_TEXT	SEGMENT
_L$ = -36						; size = 32
tv192 = -4						; size = 4
_key$ = 8						; size = 4
tv95 = 12						; size = 4
_K$ = 12						; size = 4
_A$ = 16						; size = 4
_keylen$ = 16						; size = 4
_rc6_setkey PROC					; COMDAT
; File f:\gh\rc6\rc6.c
; Line 9
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 13
	mov	ecx, DWORD PTR _keylen$[ebp]
	push	ebx
	shr	ecx, 2
	xor	ebx, ebx
	push	esi
	push	edi
	mov	DWORD PTR tv192[ebp], ecx
	cmp	ecx, ebx
	jbe	SHORT $LN9@rc6_setkey
	mov	esi, DWORD PTR _K$[ebp]
	lea	edi, DWORD PTR _L$[ebp]
	rep movsd
$LN9@rc6_setkey:
; Line 17
	mov	ecx, -1209970333			; b7e15163H
; Line 20
	xor	eax, eax
$LL6@rc6_setkey:
; Line 21
	mov	edx, DWORD PTR _key$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
; Line 22
	sub	ecx, 1640531527				; 61c88647H
	inc	eax
	cmp	eax, 44					; 0000002cH
	jb	SHORT $LL6@rc6_setkey
; Line 25
	xor	edi, edi
	xor	esi, esi
	mov	DWORD PTR _A$[ebp], ebx
	mov	DWORD PTR tv95[ebp], 132		; 00000084H
$LL18@rc6_setkey:
; Line 30
	mov	eax, DWORD PTR _key$[ebp]
	lea	ecx, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [ecx]
	add	eax, ebx
	add	eax, DWORD PTR _A$[ebp]
; Line 31
	lea	edx, DWORD PTR _L$[ebp+edi*4]
	rol	eax, 3
	mov	DWORD PTR [ecx], eax
	lea	ecx, DWORD PTR [ebx+eax]
	mov	DWORD PTR _A$[ebp], eax
	mov	eax, DWORD PTR [edx]
	add	eax, ebx
	add	eax, DWORD PTR _A$[ebp]
; Line 34
	push	44					; 0000002cH
	rol	eax, cl
	pop	ecx
	mov	DWORD PTR [edx], eax
	mov	ebx, eax
	xor	edx, edx
	lea	eax, DWORD PTR [esi+1]
	div	ecx
; Line 36
	lea	eax, DWORD PTR [edi+1]
	mov	esi, edx
; Line 37
	xor	edx, edx
	div	DWORD PTR tv192[ebp]
	dec	DWORD PTR tv95[ebp]
	mov	edi, edx
	jne	SHORT $LL18@rc6_setkey
	pop	edi
	pop	esi
	pop	ebx
; Line 39
	leave
	ret	0
_rc6_setkey ENDP
_TEXT	ENDS
PUBLIC	_rc6_crypt
; Function compile flags: /Ogspy
;	COMDAT _rc6_crypt
_TEXT	SEGMENT
tv243 = -8						; size = 4
_D$ = -4						; size = 4
tv71 = 8						; size = 4
_key$ = 8						; size = 4
_C$ = 12						; size = 4
_input$ = 12						; size = 4
_output$ = 16						; size = 4
_enc$ = 20						; size = 4
_rc6_crypt PROC						; COMDAT
; Line 42
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 56
	cmp	DWORD PTR _enc$[ebp], 1
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+12]
; Line 58
	mov	edx, DWORD PTR _key$[ebp]
	push	ebx
	mov	ebx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+8]
	push	edi
	mov	edi, DWORD PTR [eax+4]
	mov	DWORD PTR _C$[ebp], esi
	mov	DWORD PTR _D$[ebp], ecx
	jne	SHORT $LN9@rc6_crypt
; Line 59
	add	ecx, DWORD PTR [edx+4]
	add	edi, DWORD PTR [edx]
	mov	DWORD PTR _D$[ebp], ecx
	add	edx, 8
; Line 60
	jmp	SHORT $LN8@rc6_crypt
$LN9@rc6_crypt:
; Line 62
	sub	esi, DWORD PTR [edx+172]
; Line 63
	sub	ebx, DWORD PTR [edx+168]
	mov	DWORD PTR _C$[ebp], esi
	sub	edx, -164				; ffffff5cH
$LN8@rc6_crypt:
; Line 66
	mov	DWORD PTR tv243[ebp], 20		; 00000014H
$LL7@rc6_crypt:
; Line 68
	cmp	DWORD PTR _enc$[ebp], 1
	jne	SHORT $LN4@rc6_crypt
; Line 70
	lea	esi, DWORD PTR [edi+edi+1]
	imul	esi, edi
; Line 71
	lea	eax, DWORD PTR [ecx+ecx+1]
	imul	eax, ecx
	rol	esi, 5
	rol	eax, 5
; Line 72
	mov	ecx, eax
; Line 73
	xor	eax, DWORD PTR _C$[ebp]
	mov	DWORD PTR tv71[ebp], esi
	xor	DWORD PTR tv71[ebp], ebx
	mov	ebx, DWORD PTR tv71[ebp]
	rol	ebx, cl
	mov	ecx, esi
	add	ebx, DWORD PTR [edx]
	rol	eax, cl
; Line 75
	mov	ecx, ebx
; Line 76
	mov	ebx, edi
	add	eax, DWORD PTR [edx+4]
	add	edx, 8
; Line 77
	mov	edi, eax
; Line 78
	mov	eax, DWORD PTR _D$[ebp]
	mov	DWORD PTR _C$[ebp], eax
; Line 79
	mov	DWORD PTR _D$[ebp], ecx
; Line 80
	jmp	SHORT $LN6@rc6_crypt
$LN4@rc6_crypt:
; Line 83
	sub	edi, DWORD PTR [edx]
	lea	esi, DWORD PTR [esi+esi+1]
	imul	esi, DWORD PTR _C$[ebp]
	lea	eax, DWORD PTR [ebx+ebx+1]
	imul	eax, ebx
	rol	eax, 5
	rol	esi, 5
	push	32					; 00000020H
	pop	ecx
	sub	ecx, eax
	rol	edi, cl
; Line 84
	push	32					; 00000020H
	pop	ecx
	sub	ecx, esi
	xor	edi, esi
	mov	esi, DWORD PTR _D$[ebp]
	sub	esi, DWORD PTR [edx-4]
	rol	esi, cl
	xor	esi, eax
; Line 87
	mov	eax, DWORD PTR _C$[ebp]
; Line 88
	mov	DWORD PTR _C$[ebp], edi
; Line 89
	mov	edi, ebx
	sub	edx, 8
	mov	DWORD PTR _D$[ebp], eax
; Line 90
	mov	ebx, esi
$LN6@rc6_crypt:
; Line 98
	dec	DWORD PTR tv243[ebp]
	mov	esi, DWORD PTR _C$[ebp]
; Line 99
	mov	ecx, DWORD PTR _D$[ebp]
	jne	$LL7@rc6_crypt
; Line 95
	cmp	DWORD PTR _enc$[ebp], 1
	jne	SHORT $LN2@rc6_crypt
; Line 97
	add	ebx, DWORD PTR [edx]
; Line 98
	add	esi, DWORD PTR [edx+4]
; Line 99
	jmp	SHORT $LN1@rc6_crypt
$LN2@rc6_crypt:
; Line 100
	sub	ecx, DWORD PTR [edx]
; Line 101
	sub	edi, DWORD PTR [edx-4]
$LN1@rc6_crypt:
; Line 104
	mov	eax, DWORD PTR _output$[ebp]
; Line 105
	mov	DWORD PTR [eax+4], edi
	pop	edi
; Line 106
	mov	DWORD PTR [eax+8], esi
	pop	esi
	mov	DWORD PTR [eax], ebx
; Line 107
	mov	DWORD PTR [eax+12], ecx
	pop	ebx
; Line 108
	leave
	ret	0
_rc6_crypt ENDP
_TEXT	ENDS
END
